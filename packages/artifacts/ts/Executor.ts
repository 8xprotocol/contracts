/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class Executor extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "requirementsContract",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "stakeContract",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "approvedRegistry",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "transferProxy",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "lockUpPercentage",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "paymentRegistry",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "maximumIntervalDivisor",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          { name: "_transferProxyAddress", type: "address" },
          { name: "_stakeContractAddress", type: "address" },
          { name: "_paymentRegistryAddress", type: "address" },
          { name: "_approvedRegistryAddress", type: "address" },
          { name: "_requirementsAddress", type: "address" },
          { name: "_lockUpPercentage", type: "uint256" },
          { name: "_divisor", type: "uint256" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subscriptionAddress", type: "address" },
          { indexed: true, name: "subscriptionIdentifier", type: "bytes32" },
          { indexed: true, name: "tokenAddress", type: "address" },
          { indexed: false, name: "dueDate", type: "uint256" },
          { indexed: false, name: "amount", type: "uint256" },
          { indexed: false, name: "fee", type: "uint256" }
        ],
        name: "SubscriptionActivated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subscriptionIdentifier", type: "bytes32" },
          { indexed: true, name: "claimant", type: "address" },
          { indexed: true, name: "dueDate", type: "uint256" },
          { indexed: false, name: "staked", type: "uint256" }
        ],
        name: "SubscriptionProcessed",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subscriptionIdentifier", type: "bytes32" },
          { indexed: true, name: "releasedBy", type: "address" },
          { indexed: true, name: "dueDate", type: "uint256" }
        ],
        name: "SubscriptionReleased",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subscriptionIdentifier", type: "bytes32" },
          { indexed: true, name: "originalClaimant", type: "address" },
          { indexed: true, name: "newClaimant", type: "address" },
          { indexed: false, name: "amountLost", type: "uint256" }
        ],
        name: "SubscriptionLatePaymentCaught",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subscriptionAddress", type: "address" },
          { indexed: true, name: "subscriptionIdentifier", type: "bytes32" }
        ],
        name: "SubscriptionCancelled",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: "number", type: "uint256" }],
        name: "Checkpoint",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [{ name: "_percentage", type: "uint256" }],
        name: "setPercentageLockUp",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_divisor", type: "uint256" }],
        name: "setMaximumIntervalDivisor",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_subscriptionContract", type: "address" },
          { name: "_subscriptionIdentifier", type: "bytes32" }
        ],
        name: "activateSubscription",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_subscriptionContract", type: "address" },
          { name: "_subscriptionIdentifier", type: "bytes32" }
        ],
        name: "processSubscription",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_subscriptionContract", type: "address" },
          { name: "_subscriptionIdentifier", type: "bytes32" }
        ],
        name: "releaseSubscription",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_subscriptionContract", type: "address" },
          { name: "_subscriptionIdentifier", type: "bytes32" }
        ],
        name: "catchLateSubscription",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_subscriptionContract", type: "address" },
          { name: "_subscriptionIdentifier", type: "bytes32" }
        ],
        name: "cancelSubscription",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenAddress", type: "address" },
          { name: "_startDate", type: "uint256" },
          { name: "_interval", type: "uint256" }
        ],
        name: "determineStake",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Executor> {
    const contract = new Executor(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get requirementsContract(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.requirementsContract, []);
  }

  public get stakeContract(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.stakeContract, []);
  }

  public get approvedRegistry(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.approvedRegistry, []);
  }

  public get transferProxy(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.transferProxy, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get lockUpPercentage(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.lockUpPercentage, []);
  }

  public get paymentRegistry(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.paymentRegistry, []);
  }

  public get maximumIntervalDivisor(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.maximumIntervalDivisor, []);
  }

  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public setPercentageLockUpTx(
    _percentage: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setPercentageLockUp",
      [_percentage.toString()]
    );
  }
  public setMaximumIntervalDivisorTx(
    _divisor: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setMaximumIntervalDivisor",
      [_divisor.toString()]
    );
  }
  public activateSubscriptionTx(
    _subscriptionContract: BigNumber | string,
    _subscriptionIdentifier: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "activateSubscription",
      [_subscriptionContract.toString(), _subscriptionIdentifier.toString()]
    );
  }
  public processSubscriptionTx(
    _subscriptionContract: BigNumber | string,
    _subscriptionIdentifier: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "processSubscription",
      [_subscriptionContract.toString(), _subscriptionIdentifier.toString()]
    );
  }
  public releaseSubscriptionTx(
    _subscriptionContract: BigNumber | string,
    _subscriptionIdentifier: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "releaseSubscription",
      [_subscriptionContract.toString(), _subscriptionIdentifier.toString()]
    );
  }
  public catchLateSubscriptionTx(
    _subscriptionContract: BigNumber | string,
    _subscriptionIdentifier: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "catchLateSubscription",
      [_subscriptionContract.toString(), _subscriptionIdentifier.toString()]
    );
  }
  public cancelSubscriptionTx(
    _subscriptionContract: BigNumber | string,
    _subscriptionIdentifier: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "cancelSubscription",
      [_subscriptionContract.toString(), _subscriptionIdentifier.toString()]
    );
  }
  public determineStakeTx(
    _tokenAddress: BigNumber | string,
    _startDate: BigNumber | number,
    _interval: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "determineStake",
      [_tokenAddress.toString(), _startDate.toString(), _interval.toString()]
    );
  }

  public SubscriptionActivatedEvent(eventFilter: {
    subscriptionAddress?: BigNumber | string | Array<BigNumber | string>;
    subscriptionIdentifier?: string | Array<string>;
    tokenAddress?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      subscriptionAddress: BigNumber | string;
      subscriptionIdentifier: string;
      tokenAddress: BigNumber | string;
      dueDate: BigNumber | number;
      amount: BigNumber | number;
      fee: BigNumber | number;
    },
    {
      subscriptionAddress?: BigNumber | string | Array<BigNumber | string>;
      subscriptionIdentifier?: string | Array<string>;
      tokenAddress?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        subscriptionAddress: BigNumber | string;
        subscriptionIdentifier: string;
        tokenAddress: BigNumber | string;
        dueDate: BigNumber | number;
        amount: BigNumber | number;
        fee: BigNumber | number;
      },
      {
        subscriptionAddress?: BigNumber | string | Array<BigNumber | string>;
        subscriptionIdentifier?: string | Array<string>;
        tokenAddress?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "SubscriptionActivated", eventFilter);
  }
  public SubscriptionProcessedEvent(eventFilter: {
    subscriptionIdentifier?: string | Array<string>;
    claimant?: BigNumber | string | Array<BigNumber | string>;
    dueDate?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      subscriptionIdentifier: string;
      claimant: BigNumber | string;
      dueDate: BigNumber | number;
      staked: BigNumber | number;
    },
    {
      subscriptionIdentifier?: string | Array<string>;
      claimant?: BigNumber | string | Array<BigNumber | string>;
      dueDate?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        subscriptionIdentifier: string;
        claimant: BigNumber | string;
        dueDate: BigNumber | number;
        staked: BigNumber | number;
      },
      {
        subscriptionIdentifier?: string | Array<string>;
        claimant?: BigNumber | string | Array<BigNumber | string>;
        dueDate?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "SubscriptionProcessed", eventFilter);
  }
  public SubscriptionReleasedEvent(eventFilter: {
    subscriptionIdentifier?: string | Array<string>;
    releasedBy?: BigNumber | string | Array<BigNumber | string>;
    dueDate?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      subscriptionIdentifier: string;
      releasedBy: BigNumber | string;
      dueDate: BigNumber | number;
    },
    {
      subscriptionIdentifier?: string | Array<string>;
      releasedBy?: BigNumber | string | Array<BigNumber | string>;
      dueDate?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        subscriptionIdentifier: string;
        releasedBy: BigNumber | string;
        dueDate: BigNumber | number;
      },
      {
        subscriptionIdentifier?: string | Array<string>;
        releasedBy?: BigNumber | string | Array<BigNumber | string>;
        dueDate?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "SubscriptionReleased", eventFilter);
  }
  public SubscriptionLatePaymentCaughtEvent(eventFilter: {
    subscriptionIdentifier?: string | Array<string>;
    originalClaimant?: BigNumber | string | Array<BigNumber | string>;
    newClaimant?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      subscriptionIdentifier: string;
      originalClaimant: BigNumber | string;
      newClaimant: BigNumber | string;
      amountLost: BigNumber | number;
    },
    {
      subscriptionIdentifier?: string | Array<string>;
      originalClaimant?: BigNumber | string | Array<BigNumber | string>;
      newClaimant?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        subscriptionIdentifier: string;
        originalClaimant: BigNumber | string;
        newClaimant: BigNumber | string;
        amountLost: BigNumber | number;
      },
      {
        subscriptionIdentifier?: string | Array<string>;
        originalClaimant?: BigNumber | string | Array<BigNumber | string>;
        newClaimant?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "SubscriptionLatePaymentCaught", eventFilter);
  }
  public SubscriptionCancelledEvent(eventFilter: {
    subscriptionAddress?: BigNumber | string | Array<BigNumber | string>;
    subscriptionIdentifier?: string | Array<string>;
  }): TC.DeferredEventWrapper<
    { subscriptionAddress: BigNumber | string; subscriptionIdentifier: string },
    {
      subscriptionAddress?: BigNumber | string | Array<BigNumber | string>;
      subscriptionIdentifier?: string | Array<string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        subscriptionAddress: BigNumber | string;
        subscriptionIdentifier: string;
      },
      {
        subscriptionAddress?: BigNumber | string | Array<BigNumber | string>;
        subscriptionIdentifier?: string | Array<string>;
      }
    >(this, "SubscriptionCancelled", eventFilter);
  }
  public CheckpointEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { number: BigNumber | number },
    {}
  > {
    return new TC.DeferredEventWrapper<{ number: BigNumber | number }, {}>(
      this,
      "Checkpoint",
      eventFilter
    );
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}
