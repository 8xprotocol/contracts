/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class VolumeSubscription extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "_target", type: "address" }],
        name: "addAuthorizedAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "authorities",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "approvedRegistry",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_target", type: "address" }],
        name: "removeAuthorizedAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "bytes32" }],
        name: "subscriptions",
        outputs: [
          { name: "owner", type: "address" },
          { name: "tokenAddress", type: "address" },
          { name: "planHash", type: "bytes32" },
          { name: "startDate", type: "uint256" },
          { name: "terminationDate", type: "uint256" },
          { name: "data", type: "string" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "bytes32" }],
        name: "plans",
        outputs: [
          { name: "owner", type: "address" },
          { name: "tokenAddress", type: "address" },
          { name: "identifier", type: "string" },
          { name: "interval", type: "uint256" },
          { name: "amount", type: "uint256" },
          { name: "fee", type: "uint256" },
          { name: "data", type: "string" },
          { name: "terminationDate", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "authorized",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getAuthorizedAddresses",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [{ name: "_approvedRegistryAddress", type: "address" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "identifier", type: "bytes32" },
          { indexed: true, name: "owner", type: "address" }
        ],
        name: "CreatedPlan",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "identifier", type: "bytes32" },
          { indexed: true, name: "owner", type: "address" }
        ],
        name: "UpdatedPlan",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "identifier", type: "bytes32" },
          { indexed: true, name: "owner", type: "address" },
          { indexed: false, name: "terminationDate", type: "uint256" }
        ],
        name: "TerminatedPlan",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subscriptionIdentifier", type: "bytes32" },
          { indexed: true, name: "planIdentifier", type: "bytes32" },
          { indexed: true, name: "owner", type: "address" }
        ],
        name: "CreatedSubscription",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subscriptionIdentifier", type: "bytes32" },
          { indexed: true, name: "planIdentifier", type: "bytes32" },
          { indexed: true, name: "owner", type: "address" },
          { indexed: false, name: "date", type: "uint256" }
        ],
        name: "FirstPaymentToSubscription",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subscriptionIdentifier", type: "bytes32" },
          { indexed: true, name: "planIdentifier", type: "bytes32" },
          { indexed: true, name: "owner", type: "address" }
        ],
        name: "UpdatedSubscription",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "subscriptionIdentifier", type: "bytes32" },
          { indexed: true, name: "planIdentifier", type: "bytes32" },
          { indexed: true, name: "owner", type: "address" },
          { indexed: false, name: "terminationDate", type: "uint256" }
        ],
        name: "TerminatedSubscription",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "target", type: "address" },
          { indexed: true, name: "caller", type: "address" }
        ],
        name: "LogAuthorizedAddressAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "target", type: "address" },
          { indexed: true, name: "caller", type: "address" }
        ],
        name: "LogAuthorizedAddressRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "_plan", type: "bytes32" },
          { name: "_terminationDate", type: "uint256" }
        ],
        name: "terminatePlan",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_subscription", type: "bytes32" }],
        name: "isValidSubscription",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_subscription", type: "bytes32" }],
        name: "getSubscriptionTokenAddress",
        outputs: [{ name: "subscriptionTokenAddress", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_subscription", type: "bytes32" }],
        name: "getSubscriptionFromToAddresses",
        outputs: [
          { name: "from", type: "address" },
          { name: "to", type: "address" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_subscription", type: "bytes32" }],
        name: "getSubscriptionInterval",
        outputs: [{ name: "interval", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_subscription", type: "bytes32" }],
        name: "getAmountDueFromSubscription",
        outputs: [{ name: "amount", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_subscription", type: "bytes32" }],
        name: "getSubscriptionFee",
        outputs: [{ name: "fee", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_date", type: "uint256" },
          { name: "_subscription", type: "bytes32" }
        ],
        name: "setStartDate",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_subscription", type: "bytes32" }],
        name: "cancelSubscription",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_owner", type: "address" },
          { name: "_tokenAddress", type: "address" },
          { name: "_identifier", type: "string" },
          { name: "_interval", type: "uint256" },
          { name: "_amount", type: "uint256" },
          { name: "_fee", type: "uint256" },
          { name: "_data", type: "string" }
        ],
        name: "createPlan",
        outputs: [{ name: "newPlanHash", type: "bytes32" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_planHash", type: "bytes32" },
          { name: "_data", type: "string" }
        ],
        name: "createSubscription",
        outputs: [{ name: "newSubscriptionHash", type: "bytes32" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_plan", type: "bytes32" },
          { name: "_owner", type: "address" }
        ],
        name: "setPlanOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_plan", type: "bytes32" },
          { name: "_data", type: "string" }
        ],
        name: "setPlanData",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_subscription", type: "bytes32" },
          { name: "_data", type: "string" }
        ],
        name: "setSubscriptionData",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<VolumeSubscription> {
    const contract = new VolumeSubscription(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get approvedRegistry(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.approvedRegistry, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get getAuthorizedAddresses(): Promise<string[]> {
    return TC.promisify(this.rawWeb3Contract.getAuthorizedAddresses, []);
  }

  public authorities(arg0: BigNumber | number): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.authorities, [arg0.toString()]);
  }

  public subscriptions(
    arg0: string
  ): Promise<[string, string, string, BigNumber, BigNumber, string]> {
    return TC.promisify(this.rawWeb3Contract.subscriptions, [arg0.toString()]);
  }

  public plans(
    arg0: string
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, string, BigNumber]
  > {
    return TC.promisify(this.rawWeb3Contract.plans, [arg0.toString()]);
  }

  public authorized(arg0: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.authorized, [arg0.toString()]);
  }

  public isValidSubscription(_subscription: string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isValidSubscription, [
      _subscription.toString()
    ]);
  }

  public getSubscriptionTokenAddress(_subscription: string): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getSubscriptionTokenAddress, [
      _subscription.toString()
    ]);
  }

  public getSubscriptionFromToAddresses(
    _subscription: string
  ): Promise<[string, string]> {
    return TC.promisify(this.rawWeb3Contract.getSubscriptionFromToAddresses, [
      _subscription.toString()
    ]);
  }

  public getSubscriptionInterval(_subscription: string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getSubscriptionInterval, [
      _subscription.toString()
    ]);
  }

  public getAmountDueFromSubscription(
    _subscription: string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getAmountDueFromSubscription, [
      _subscription.toString()
    ]);
  }

  public getSubscriptionFee(_subscription: string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getSubscriptionFee, [
      _subscription.toString()
    ]);
  }

  public addAuthorizedAddressTx(
    _target: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addAuthorizedAddress",
      [_target.toString()]
    );
  }
  public removeAuthorizedAddressTx(
    _target: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeAuthorizedAddress",
      [_target.toString()]
    );
  }
  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public terminatePlanTx(
    _plan: string,
    _terminationDate: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "terminatePlan",
      [_plan.toString(), _terminationDate.toString()]
    );
  }
  public setStartDateTx(
    _date: BigNumber | number,
    _subscription: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setStartDate",
      [_date.toString(), _subscription.toString()]
    );
  }
  public cancelSubscriptionTx(
    _subscription: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "cancelSubscription",
      [_subscription.toString()]
    );
  }
  public createPlanTx(
    _owner: BigNumber | string,
    _tokenAddress: BigNumber | string,
    _identifier: string,
    _interval: BigNumber | number,
    _amount: BigNumber | number,
    _fee: BigNumber | number,
    _data: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "createPlan", [
      _owner.toString(),
      _tokenAddress.toString(),
      _identifier.toString(),
      _interval.toString(),
      _amount.toString(),
      _fee.toString(),
      _data.toString()
    ]);
  }
  public createSubscriptionTx(
    _planHash: string,
    _data: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "createSubscription",
      [_planHash.toString(), _data.toString()]
    );
  }
  public setPlanOwnerTx(
    _plan: string,
    _owner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setPlanOwner",
      [_plan.toString(), _owner.toString()]
    );
  }
  public setPlanDataTx(
    _plan: string,
    _data: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setPlanData",
      [_plan.toString(), _data.toString()]
    );
  }
  public setSubscriptionDataTx(
    _subscription: string,
    _data: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setSubscriptionData",
      [_subscription.toString(), _data.toString()]
    );
  }

  public CreatedPlanEvent(eventFilter: {
    identifier?: string | Array<string>;
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { identifier: string; owner: BigNumber | string },
    {
      identifier?: string | Array<string>;
      owner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { identifier: string; owner: BigNumber | string },
      {
        identifier?: string | Array<string>;
        owner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "CreatedPlan", eventFilter);
  }
  public UpdatedPlanEvent(eventFilter: {
    identifier?: string | Array<string>;
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { identifier: string; owner: BigNumber | string },
    {
      identifier?: string | Array<string>;
      owner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { identifier: string; owner: BigNumber | string },
      {
        identifier?: string | Array<string>;
        owner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "UpdatedPlan", eventFilter);
  }
  public TerminatedPlanEvent(eventFilter: {
    identifier?: string | Array<string>;
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      identifier: string;
      owner: BigNumber | string;
      terminationDate: BigNumber | number;
    },
    {
      identifier?: string | Array<string>;
      owner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        identifier: string;
        owner: BigNumber | string;
        terminationDate: BigNumber | number;
      },
      {
        identifier?: string | Array<string>;
        owner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "TerminatedPlan", eventFilter);
  }
  public CreatedSubscriptionEvent(eventFilter: {
    subscriptionIdentifier?: string | Array<string>;
    planIdentifier?: string | Array<string>;
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      subscriptionIdentifier: string;
      planIdentifier: string;
      owner: BigNumber | string;
    },
    {
      subscriptionIdentifier?: string | Array<string>;
      planIdentifier?: string | Array<string>;
      owner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        subscriptionIdentifier: string;
        planIdentifier: string;
        owner: BigNumber | string;
      },
      {
        subscriptionIdentifier?: string | Array<string>;
        planIdentifier?: string | Array<string>;
        owner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "CreatedSubscription", eventFilter);
  }
  public FirstPaymentToSubscriptionEvent(eventFilter: {
    subscriptionIdentifier?: string | Array<string>;
    planIdentifier?: string | Array<string>;
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      subscriptionIdentifier: string;
      planIdentifier: string;
      owner: BigNumber | string;
      date: BigNumber | number;
    },
    {
      subscriptionIdentifier?: string | Array<string>;
      planIdentifier?: string | Array<string>;
      owner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        subscriptionIdentifier: string;
        planIdentifier: string;
        owner: BigNumber | string;
        date: BigNumber | number;
      },
      {
        subscriptionIdentifier?: string | Array<string>;
        planIdentifier?: string | Array<string>;
        owner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "FirstPaymentToSubscription", eventFilter);
  }
  public UpdatedSubscriptionEvent(eventFilter: {
    subscriptionIdentifier?: string | Array<string>;
    planIdentifier?: string | Array<string>;
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      subscriptionIdentifier: string;
      planIdentifier: string;
      owner: BigNumber | string;
    },
    {
      subscriptionIdentifier?: string | Array<string>;
      planIdentifier?: string | Array<string>;
      owner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        subscriptionIdentifier: string;
        planIdentifier: string;
        owner: BigNumber | string;
      },
      {
        subscriptionIdentifier?: string | Array<string>;
        planIdentifier?: string | Array<string>;
        owner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "UpdatedSubscription", eventFilter);
  }
  public TerminatedSubscriptionEvent(eventFilter: {
    subscriptionIdentifier?: string | Array<string>;
    planIdentifier?: string | Array<string>;
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      subscriptionIdentifier: string;
      planIdentifier: string;
      owner: BigNumber | string;
      terminationDate: BigNumber | number;
    },
    {
      subscriptionIdentifier?: string | Array<string>;
      planIdentifier?: string | Array<string>;
      owner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        subscriptionIdentifier: string;
        planIdentifier: string;
        owner: BigNumber | string;
        terminationDate: BigNumber | number;
      },
      {
        subscriptionIdentifier?: string | Array<string>;
        planIdentifier?: string | Array<string>;
        owner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "TerminatedSubscription", eventFilter);
  }
  public LogAuthorizedAddressAddedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
    caller?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string; caller: BigNumber | string },
    {
      target?: BigNumber | string | Array<BigNumber | string>;
      caller?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string; caller: BigNumber | string },
      {
        target?: BigNumber | string | Array<BigNumber | string>;
        caller?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "LogAuthorizedAddressAdded", eventFilter);
  }
  public LogAuthorizedAddressRemovedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
    caller?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string; caller: BigNumber | string },
    {
      target?: BigNumber | string | Array<BigNumber | string>;
      caller?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string; caller: BigNumber | string },
      {
        target?: BigNumber | string | Array<BigNumber | string>;
        caller?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "LogAuthorizedAddressRemoved", eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}
