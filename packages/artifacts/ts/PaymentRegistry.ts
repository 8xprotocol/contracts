/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class PaymentRegistry extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [{ name: "", type: "bytes32" }],
        name: "payments",
        outputs: [
          { name: "tokenAddress", type: "address" },
          { name: "dueDate", type: "uint256" },
          { name: "amount", type: "uint256" },
          { name: "fee", type: "uint256" },
          { name: "lastPaymentDate", type: "uint256" },
          { name: "claimant", type: "address" },
          { name: "executionPeriod", type: "uint256" },
          { name: "staked", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_target", type: "address" }],
        name: "addAuthorizedAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "authorities",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_target", type: "address" }],
        name: "removeAuthorizedAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "authorized",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getAuthorizedAddresses",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "subscriptionIdentifer", type: "bytes32" }
        ],
        name: "PaymentCreated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "subscriptionIdentifer", type: "bytes32" },
          { indexed: false, name: "claimant", type: "address" }
        ],
        name: "PaymentClaimed",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "subscriptionIdentifer", type: "bytes32" },
          { indexed: false, name: "claimant", type: "address" }
        ],
        name: "PaymentClaimantRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "subscriptionIdentifer", type: "bytes32" },
          { indexed: false, name: "claimant", type: "address" }
        ],
        name: "PaymentClaimantTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "subscriptionIdentifer", type: "bytes32" }
        ],
        name: "PaymentCancelled",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "subscriptionIdentifier", type: "bytes32" }
        ],
        name: "PaymentDeleted",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "one", type: "uint256" },
          { indexed: false, name: "two", type: "uint256" }
        ],
        name: "Debug",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "target", type: "address" },
          { indexed: true, name: "caller", type: "address" }
        ],
        name: "LogAuthorizedAddressAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "target", type: "address" },
          { indexed: true, name: "caller", type: "address" }
        ],
        name: "LogAuthorizedAddressRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "_subscriptionIdentifier", type: "bytes32" },
          { name: "_tokenAddress", type: "address" },
          { name: "_dueDate", type: "uint256" },
          { name: "_amount", type: "uint256" },
          { name: "_fee", type: "uint256" }
        ],
        name: "createNewPayment",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_subscriptionIdentifier", type: "bytes32" },
          { name: "_claimant", type: "address" },
          { name: "_nextPayment", type: "uint256" },
          { name: "_staked", type: "uint256" }
        ],
        name: "claimPayment",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_subscriptionIdentifier", type: "bytes32" },
          { name: "_claimant", type: "address" }
        ],
        name: "removeClaimant",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_subscriptionIdentifier", type: "bytes32" },
          { name: "_claimant", type: "address" },
          { name: "_nextPayment", type: "uint256" }
        ],
        name: "transferClaimant",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_subscriptionIdentifier", type: "bytes32" }],
        name: "cancelPayment",
        outputs: [{ name: "sucess", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_subscriptionIdentifier", type: "bytes32" }],
        name: "deletePayment",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_subscriptionIdenitifer", type: "bytes32" }],
        name: "getPaymentInformation",
        outputs: [
          { name: "tokenAddress", type: "address" },
          { name: "dueDate", type: "uint256" },
          { name: "amount", type: "uint256" },
          { name: "fee", type: "uint256" },
          { name: "lastPaymentDate", type: "uint256" },
          { name: "claimant", type: "address" },
          { name: "executionPeriod", type: "uint256" },
          { name: "staked", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<PaymentRegistry> {
    const contract = new PaymentRegistry(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get getAuthorizedAddresses(): Promise<string[]> {
    return TC.promisify(this.rawWeb3Contract.getAuthorizedAddresses, []);
  }

  public payments(
    arg0: string
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber
    ]
  > {
    return TC.promisify(this.rawWeb3Contract.payments, [arg0.toString()]);
  }

  public authorities(arg0: BigNumber | number): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.authorities, [arg0.toString()]);
  }

  public authorized(arg0: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.authorized, [arg0.toString()]);
  }

  public getPaymentInformation(
    _subscriptionIdenitifer: string
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber
    ]
  > {
    return TC.promisify(this.rawWeb3Contract.getPaymentInformation, [
      _subscriptionIdenitifer.toString()
    ]);
  }

  public addAuthorizedAddressTx(
    _target: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addAuthorizedAddress",
      [_target.toString()]
    );
  }
  public removeAuthorizedAddressTx(
    _target: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeAuthorizedAddress",
      [_target.toString()]
    );
  }
  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public createNewPaymentTx(
    _subscriptionIdentifier: string,
    _tokenAddress: BigNumber | string,
    _dueDate: BigNumber | number,
    _amount: BigNumber | number,
    _fee: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "createNewPayment",
      [
        _subscriptionIdentifier.toString(),
        _tokenAddress.toString(),
        _dueDate.toString(),
        _amount.toString(),
        _fee.toString()
      ]
    );
  }
  public claimPaymentTx(
    _subscriptionIdentifier: string,
    _claimant: BigNumber | string,
    _nextPayment: BigNumber | number,
    _staked: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "claimPayment",
      [
        _subscriptionIdentifier.toString(),
        _claimant.toString(),
        _nextPayment.toString(),
        _staked.toString()
      ]
    );
  }
  public removeClaimantTx(
    _subscriptionIdentifier: string,
    _claimant: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeClaimant",
      [_subscriptionIdentifier.toString(), _claimant.toString()]
    );
  }
  public transferClaimantTx(
    _subscriptionIdentifier: string,
    _claimant: BigNumber | string,
    _nextPayment: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferClaimant",
      [
        _subscriptionIdentifier.toString(),
        _claimant.toString(),
        _nextPayment.toString()
      ]
    );
  }
  public cancelPaymentTx(
    _subscriptionIdentifier: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "cancelPayment",
      [_subscriptionIdentifier.toString()]
    );
  }
  public deletePaymentTx(
    _subscriptionIdentifier: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "deletePayment",
      [_subscriptionIdentifier.toString()]
    );
  }

  public PaymentCreatedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { subscriptionIdentifer: string },
    {}
  > {
    return new TC.DeferredEventWrapper<{ subscriptionIdentifer: string }, {}>(
      this,
      "PaymentCreated",
      eventFilter
    );
  }
  public PaymentClaimedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { subscriptionIdentifer: string; claimant: BigNumber | string },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { subscriptionIdentifer: string; claimant: BigNumber | string },
      {}
    >(this, "PaymentClaimed", eventFilter);
  }
  public PaymentClaimantRemovedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { subscriptionIdentifer: string; claimant: BigNumber | string },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { subscriptionIdentifer: string; claimant: BigNumber | string },
      {}
    >(this, "PaymentClaimantRemoved", eventFilter);
  }
  public PaymentClaimantTransferredEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { subscriptionIdentifer: string; claimant: BigNumber | string },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { subscriptionIdentifer: string; claimant: BigNumber | string },
      {}
    >(this, "PaymentClaimantTransferred", eventFilter);
  }
  public PaymentCancelledEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { subscriptionIdentifer: string },
    {}
  > {
    return new TC.DeferredEventWrapper<{ subscriptionIdentifer: string }, {}>(
      this,
      "PaymentCancelled",
      eventFilter
    );
  }
  public PaymentDeletedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { subscriptionIdentifier: string },
    {}
  > {
    return new TC.DeferredEventWrapper<{ subscriptionIdentifier: string }, {}>(
      this,
      "PaymentDeleted",
      eventFilter
    );
  }
  public DebugEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { one: BigNumber | number; two: BigNumber | number },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { one: BigNumber | number; two: BigNumber | number },
      {}
    >(this, "Debug", eventFilter);
  }
  public LogAuthorizedAddressAddedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
    caller?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string; caller: BigNumber | string },
    {
      target?: BigNumber | string | Array<BigNumber | string>;
      caller?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string; caller: BigNumber | string },
      {
        target?: BigNumber | string | Array<BigNumber | string>;
        caller?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "LogAuthorizedAddressAdded", eventFilter);
  }
  public LogAuthorizedAddressRemovedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
    caller?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string; caller: BigNumber | string },
    {
      target?: BigNumber | string | Array<BigNumber | string>;
      caller?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string; caller: BigNumber | string },
      {
        target?: BigNumber | string | Array<BigNumber | string>;
        caller?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "LogAuthorizedAddressRemoved", eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}
