/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class ApprovedRegistry extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "wrappedEther",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "approvedContractArray",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "approvedTokenArray",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }, { name: "", type: "uint256" }],
        name: "approvedContractMapping",
        outputs: [
          { name: "callValue", type: "uint256" },
          { name: "gasCost", type: "uint256" },
          { name: "gasPrice", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "approvedTokenMapping",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "kyberProxy",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [{ name: "_kyberAddress", type: "address" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "target", type: "address" }],
        name: "ContractAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "target", type: "address" }],
        name: "ContractRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "target", type: "address" }],
        name: "TokenAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "target", type: "address" }],
        name: "TokenRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "contractAddress", type: "address" },
          { indexed: true, name: "index", type: "uint256" }
        ],
        name: "ContractGasCostSet",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "contractAddress", type: "address" },
          { indexed: true, name: "index", type: "uint256" }
        ],
        name: "ContractGasCostRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenAddress", type: "address" },
          { name: "_contractAddress", type: "address" },
          { name: "_index", type: "uint256" }
        ],
        name: "getGasCost",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_tokenAddress", type: "address" }],
        name: "getRateFor",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_contractAddress", type: "address" }],
        name: "addApprovedContract",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_contractAddress", type: "address" },
          { name: "_index", type: "uint256" },
          { name: "_callValue", type: "uint256" },
          { name: "_gasCost", type: "uint256" },
          { name: "_gasPrice", type: "uint256" }
        ],
        name: "setApprovedContractCallCost",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenAddress", type: "address" },
          { name: "_isWETH", type: "bool" }
        ],
        name: "addApprovedToken",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_contractAddress", type: "address" }],
        name: "removeApprovedContract",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_contractAddress", type: "address" },
          { name: "_index", type: "uint256" }
        ],
        name: "removeApprovedContractCallCost",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_tokenAddress", type: "address" }],
        name: "removeApprovedToken",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getApprovedContracts",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getApprovedTokens",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_contractAddress", type: "address" }],
        name: "isContractAuthorised",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_tokenAddress", type: "address" }],
        name: "isTokenAuthorised",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<ApprovedRegistry> {
    const contract = new ApprovedRegistry(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get wrappedEther(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.wrappedEther, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get kyberProxy(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.kyberProxy, []);
  }

  public get getApprovedContracts(): Promise<string[]> {
    return TC.promisify(this.rawWeb3Contract.getApprovedContracts, []);
  }

  public get getApprovedTokens(): Promise<string[]> {
    return TC.promisify(this.rawWeb3Contract.getApprovedTokens, []);
  }

  public approvedContractArray(arg0: BigNumber | number): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.approvedContractArray, [
      arg0.toString()
    ]);
  }

  public approvedTokenArray(arg0: BigNumber | number): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.approvedTokenArray, [
      arg0.toString()
    ]);
  }

  public approvedContractMapping(
    arg0: BigNumber | string,
    arg1: BigNumber | number
  ): Promise<[BigNumber, BigNumber, BigNumber]> {
    return TC.promisify(this.rawWeb3Contract.approvedContractMapping, [
      arg0.toString(),
      arg1.toString()
    ]);
  }

  public approvedTokenMapping(arg0: BigNumber | string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.approvedTokenMapping, [
      arg0.toString()
    ]);
  }

  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public getGasCostTx(
    _tokenAddress: BigNumber | string,
    _contractAddress: BigNumber | string,
    _index: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "getGasCost", [
      _tokenAddress.toString(),
      _contractAddress.toString(),
      _index.toString()
    ]);
  }
  public getRateForTx(
    _tokenAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "getRateFor", [
      _tokenAddress.toString()
    ]);
  }
  public addApprovedContractTx(
    _contractAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addApprovedContract",
      [_contractAddress.toString()]
    );
  }
  public setApprovedContractCallCostTx(
    _contractAddress: BigNumber | string,
    _index: BigNumber | number,
    _callValue: BigNumber | number,
    _gasCost: BigNumber | number,
    _gasPrice: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setApprovedContractCallCost",
      [
        _contractAddress.toString(),
        _index.toString(),
        _callValue.toString(),
        _gasCost.toString(),
        _gasPrice.toString()
      ]
    );
  }
  public addApprovedTokenTx(
    _tokenAddress: BigNumber | string,
    _isWETH: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addApprovedToken",
      [_tokenAddress.toString(), _isWETH.toString()]
    );
  }
  public removeApprovedContractTx(
    _contractAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeApprovedContract",
      [_contractAddress.toString()]
    );
  }
  public removeApprovedContractCallCostTx(
    _contractAddress: BigNumber | string,
    _index: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeApprovedContractCallCost",
      [_contractAddress.toString(), _index.toString()]
    );
  }
  public removeApprovedTokenTx(
    _tokenAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeApprovedToken",
      [_tokenAddress.toString()]
    );
  }
  public isContractAuthorisedTx(
    _contractAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "isContractAuthorised",
      [_contractAddress.toString()]
    );
  }
  public isTokenAuthorisedTx(
    _tokenAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "isTokenAuthorised",
      [_tokenAddress.toString()]
    );
  }

  public ContractAddedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string },
    { target?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string },
      { target?: BigNumber | string | Array<BigNumber | string> }
    >(this, "ContractAdded", eventFilter);
  }
  public ContractRemovedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string },
    { target?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string },
      { target?: BigNumber | string | Array<BigNumber | string> }
    >(this, "ContractRemoved", eventFilter);
  }
  public TokenAddedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string },
    { target?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string },
      { target?: BigNumber | string | Array<BigNumber | string> }
    >(this, "TokenAdded", eventFilter);
  }
  public TokenRemovedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string },
    { target?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string },
      { target?: BigNumber | string | Array<BigNumber | string> }
    >(this, "TokenRemoved", eventFilter);
  }
  public ContractGasCostSetEvent(eventFilter: {
    contractAddress?: BigNumber | string | Array<BigNumber | string>;
    index?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { contractAddress: BigNumber | string; index: BigNumber | number },
    {
      contractAddress?: BigNumber | string | Array<BigNumber | string>;
      index?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { contractAddress: BigNumber | string; index: BigNumber | number },
      {
        contractAddress?: BigNumber | string | Array<BigNumber | string>;
        index?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ContractGasCostSet", eventFilter);
  }
  public ContractGasCostRemovedEvent(eventFilter: {
    contractAddress?: BigNumber | string | Array<BigNumber | string>;
    index?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { contractAddress: BigNumber | string; index: BigNumber | number },
    {
      contractAddress?: BigNumber | string | Array<BigNumber | string>;
      index?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { contractAddress: BigNumber | string; index: BigNumber | number },
      {
        contractAddress?: BigNumber | string | Array<BigNumber | string>;
        index?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ContractGasCostRemoved", eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}
