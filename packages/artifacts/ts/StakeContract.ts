/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class StakeContract extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "_target", type: "address" }],
        name: "addAuthorizedAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "authorities",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "tokenContract",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_target", type: "address" }],
        name: "removeAuthorizedAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }, { name: "", type: "address" }],
        name: "userStakes",
        outputs: [
          { name: "lockedUp", type: "uint256" },
          { name: "total", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "authorized",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getAuthorizedAddresses",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [{ name: "_tokenAddress", type: "address" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "staker", type: "address" },
          { indexed: true, name: "tokenAddress", type: "address" },
          { indexed: true, name: "amount", type: "uint256" }
        ],
        name: "Locked",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "staker", type: "address" },
          { indexed: true, name: "tokenAddress", type: "address" },
          { indexed: true, name: "amount", type: "uint256" }
        ],
        name: "Unlocked",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "staker", type: "address" },
          { indexed: true, name: "tokenAddress", type: "address" },
          { indexed: true, name: "amount", type: "uint256" }
        ],
        name: "Slashed",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "staker", type: "address" },
          { indexed: true, name: "tokenAddress", type: "address" },
          { indexed: true, name: "amount", type: "uint256" },
          { indexed: false, name: "destination", type: "address" }
        ],
        name: "Transferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "staker", type: "address" },
          { indexed: true, name: "tokenAddress", type: "address" },
          { indexed: true, name: "amount", type: "uint256" }
        ],
        name: "ToppedUp",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "staker", type: "address" },
          { indexed: true, name: "tokenAddress", type: "address" },
          { indexed: true, name: "amount", type: "uint256" }
        ],
        name: "Withdrew",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "tokenAddress", type: "address" },
          { indexed: true, name: "gini", type: "uint256" }
        ],
        name: "GiniCoefficientUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "tokenAddress", type: "address" },
          { indexed: true, name: "divideBy", type: "uint256" }
        ],
        name: "DivideTotalUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "target", type: "address" },
          { indexed: true, name: "caller", type: "address" }
        ],
        name: "LogAuthorizedAddressAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "target", type: "address" },
          { indexed: true, name: "caller", type: "address" }
        ],
        name: "LogAuthorizedAddressRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenAddress", type: "address" },
          { name: "_gini", type: "uint256" }
        ],
        name: "setGiniCoefficient",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenAddress", type: "address" },
          { name: "_divideBy", type: "uint256" }
        ],
        name: "setDivideTotalBy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_staker", type: "address" },
          { name: "_tokenAddress", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "lockTokens",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_staker", type: "address" },
          { name: "_tokenAddress", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "unlockTokens",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_staker", type: "address" },
          { name: "_tokenAddress", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "slashTokens",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_staker", type: "address" },
          { name: "_tokenAddress", type: "address" },
          { name: "_amount", type: "uint256" },
          { name: "_destination", type: "address" }
        ],
        name: "transferStake",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_staker", type: "address" },
          { name: "_tokenAddress", type: "address" }
        ],
        name: "getTotalStake",
        outputs: [{ name: "total", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_staker", type: "address" },
          { name: "_tokenAddress", type: "address" }
        ],
        name: "getAvailableStake",
        outputs: [{ name: "available", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_staker", type: "address" },
          { name: "_tokenAddress", type: "address" }
        ],
        name: "getLockedStake",
        outputs: [{ name: "locked", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_tokenAddress", type: "address" }],
        name: "getTotalTokenStake",
        outputs: [{ name: "total", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_tokenAddress", type: "address" }],
        name: "getAvailableTokenStake",
        outputs: [{ name: "available", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_tokenAddress", type: "address" }],
        name: "getLockedTokenStake",
        outputs: [{ name: "locked", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_tokenAddress", type: "address" }],
        name: "getTokenStakeDetails",
        outputs: [
          { name: "total", type: "uint256" },
          { name: "lockedUp", type: "uint256" },
          { name: "gini", type: "uint256" },
          { name: "divideBy", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_amount", type: "uint256" },
          { name: "_tokenAddress", type: "address" }
        ],
        name: "topUpStake",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_amount", type: "uint256" },
          { name: "_tokenAddress", type: "address" }
        ],
        name: "withdrawStake",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<StakeContract> {
    const contract = new StakeContract(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get tokenContract(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.tokenContract, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get getAuthorizedAddresses(): Promise<string[]> {
    return TC.promisify(this.rawWeb3Contract.getAuthorizedAddresses, []);
  }

  public authorities(arg0: BigNumber | number): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.authorities, [arg0.toString()]);
  }

  public userStakes(
    arg0: BigNumber | string,
    arg1: BigNumber | string
  ): Promise<[BigNumber, BigNumber]> {
    return TC.promisify(this.rawWeb3Contract.userStakes, [
      arg0.toString(),
      arg1.toString()
    ]);
  }

  public authorized(arg0: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.authorized, [arg0.toString()]);
  }

  public getTotalStake(
    _staker: BigNumber | string,
    _tokenAddress: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getTotalStake, [
      _staker.toString(),
      _tokenAddress.toString()
    ]);
  }

  public getAvailableStake(
    _staker: BigNumber | string,
    _tokenAddress: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getAvailableStake, [
      _staker.toString(),
      _tokenAddress.toString()
    ]);
  }

  public getLockedStake(
    _staker: BigNumber | string,
    _tokenAddress: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getLockedStake, [
      _staker.toString(),
      _tokenAddress.toString()
    ]);
  }

  public getTotalTokenStake(
    _tokenAddress: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getTotalTokenStake, [
      _tokenAddress.toString()
    ]);
  }

  public getAvailableTokenStake(
    _tokenAddress: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getAvailableTokenStake, [
      _tokenAddress.toString()
    ]);
  }

  public getLockedTokenStake(
    _tokenAddress: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getLockedTokenStake, [
      _tokenAddress.toString()
    ]);
  }

  public getTokenStakeDetails(
    _tokenAddress: BigNumber | string
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]> {
    return TC.promisify(this.rawWeb3Contract.getTokenStakeDetails, [
      _tokenAddress.toString()
    ]);
  }

  public addAuthorizedAddressTx(
    _target: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addAuthorizedAddress",
      [_target.toString()]
    );
  }
  public removeAuthorizedAddressTx(
    _target: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeAuthorizedAddress",
      [_target.toString()]
    );
  }
  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public setGiniCoefficientTx(
    _tokenAddress: BigNumber | string,
    _gini: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setGiniCoefficient",
      [_tokenAddress.toString(), _gini.toString()]
    );
  }
  public setDivideTotalByTx(
    _tokenAddress: BigNumber | string,
    _divideBy: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setDivideTotalBy",
      [_tokenAddress.toString(), _divideBy.toString()]
    );
  }
  public lockTokensTx(
    _staker: BigNumber | string,
    _tokenAddress: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "lockTokens", [
      _staker.toString(),
      _tokenAddress.toString(),
      _amount.toString()
    ]);
  }
  public unlockTokensTx(
    _staker: BigNumber | string,
    _tokenAddress: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "unlockTokens",
      [_staker.toString(), _tokenAddress.toString(), _amount.toString()]
    );
  }
  public slashTokensTx(
    _staker: BigNumber | string,
    _tokenAddress: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "slashTokens",
      [_staker.toString(), _tokenAddress.toString(), _amount.toString()]
    );
  }
  public transferStakeTx(
    _staker: BigNumber | string,
    _tokenAddress: BigNumber | string,
    _amount: BigNumber | number,
    _destination: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferStake",
      [
        _staker.toString(),
        _tokenAddress.toString(),
        _amount.toString(),
        _destination.toString()
      ]
    );
  }
  public topUpStakeTx(
    _amount: BigNumber | number,
    _tokenAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "topUpStake", [
      _amount.toString(),
      _tokenAddress.toString()
    ]);
  }
  public withdrawStakeTx(
    _amount: BigNumber | number,
    _tokenAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "withdrawStake",
      [_amount.toString(), _tokenAddress.toString()]
    );
  }

  public LockedEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
    tokenAddress?: BigNumber | string | Array<BigNumber | string>;
    amount?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      staker: BigNumber | string;
      tokenAddress: BigNumber | string;
      amount: BigNumber | number;
    },
    {
      staker?: BigNumber | string | Array<BigNumber | string>;
      tokenAddress?: BigNumber | string | Array<BigNumber | string>;
      amount?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        staker: BigNumber | string;
        tokenAddress: BigNumber | string;
        amount: BigNumber | number;
      },
      {
        staker?: BigNumber | string | Array<BigNumber | string>;
        tokenAddress?: BigNumber | string | Array<BigNumber | string>;
        amount?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "Locked", eventFilter);
  }
  public UnlockedEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
    tokenAddress?: BigNumber | string | Array<BigNumber | string>;
    amount?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      staker: BigNumber | string;
      tokenAddress: BigNumber | string;
      amount: BigNumber | number;
    },
    {
      staker?: BigNumber | string | Array<BigNumber | string>;
      tokenAddress?: BigNumber | string | Array<BigNumber | string>;
      amount?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        staker: BigNumber | string;
        tokenAddress: BigNumber | string;
        amount: BigNumber | number;
      },
      {
        staker?: BigNumber | string | Array<BigNumber | string>;
        tokenAddress?: BigNumber | string | Array<BigNumber | string>;
        amount?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "Unlocked", eventFilter);
  }
  public SlashedEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
    tokenAddress?: BigNumber | string | Array<BigNumber | string>;
    amount?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      staker: BigNumber | string;
      tokenAddress: BigNumber | string;
      amount: BigNumber | number;
    },
    {
      staker?: BigNumber | string | Array<BigNumber | string>;
      tokenAddress?: BigNumber | string | Array<BigNumber | string>;
      amount?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        staker: BigNumber | string;
        tokenAddress: BigNumber | string;
        amount: BigNumber | number;
      },
      {
        staker?: BigNumber | string | Array<BigNumber | string>;
        tokenAddress?: BigNumber | string | Array<BigNumber | string>;
        amount?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "Slashed", eventFilter);
  }
  public TransferredEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
    tokenAddress?: BigNumber | string | Array<BigNumber | string>;
    amount?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      staker: BigNumber | string;
      tokenAddress: BigNumber | string;
      amount: BigNumber | number;
      destination: BigNumber | string;
    },
    {
      staker?: BigNumber | string | Array<BigNumber | string>;
      tokenAddress?: BigNumber | string | Array<BigNumber | string>;
      amount?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        staker: BigNumber | string;
        tokenAddress: BigNumber | string;
        amount: BigNumber | number;
        destination: BigNumber | string;
      },
      {
        staker?: BigNumber | string | Array<BigNumber | string>;
        tokenAddress?: BigNumber | string | Array<BigNumber | string>;
        amount?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "Transferred", eventFilter);
  }
  public ToppedUpEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
    tokenAddress?: BigNumber | string | Array<BigNumber | string>;
    amount?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      staker: BigNumber | string;
      tokenAddress: BigNumber | string;
      amount: BigNumber | number;
    },
    {
      staker?: BigNumber | string | Array<BigNumber | string>;
      tokenAddress?: BigNumber | string | Array<BigNumber | string>;
      amount?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        staker: BigNumber | string;
        tokenAddress: BigNumber | string;
        amount: BigNumber | number;
      },
      {
        staker?: BigNumber | string | Array<BigNumber | string>;
        tokenAddress?: BigNumber | string | Array<BigNumber | string>;
        amount?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "ToppedUp", eventFilter);
  }
  public WithdrewEvent(eventFilter: {
    staker?: BigNumber | string | Array<BigNumber | string>;
    tokenAddress?: BigNumber | string | Array<BigNumber | string>;
    amount?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      staker: BigNumber | string;
      tokenAddress: BigNumber | string;
      amount: BigNumber | number;
    },
    {
      staker?: BigNumber | string | Array<BigNumber | string>;
      tokenAddress?: BigNumber | string | Array<BigNumber | string>;
      amount?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        staker: BigNumber | string;
        tokenAddress: BigNumber | string;
        amount: BigNumber | number;
      },
      {
        staker?: BigNumber | string | Array<BigNumber | string>;
        tokenAddress?: BigNumber | string | Array<BigNumber | string>;
        amount?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "Withdrew", eventFilter);
  }
  public GiniCoefficientUpdatedEvent(eventFilter: {
    tokenAddress?: BigNumber | string | Array<BigNumber | string>;
    gini?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { tokenAddress: BigNumber | string; gini: BigNumber | number },
    {
      tokenAddress?: BigNumber | string | Array<BigNumber | string>;
      gini?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { tokenAddress: BigNumber | string; gini: BigNumber | number },
      {
        tokenAddress?: BigNumber | string | Array<BigNumber | string>;
        gini?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "GiniCoefficientUpdated", eventFilter);
  }
  public DivideTotalUpdatedEvent(eventFilter: {
    tokenAddress?: BigNumber | string | Array<BigNumber | string>;
    divideBy?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { tokenAddress: BigNumber | string; divideBy: BigNumber | number },
    {
      tokenAddress?: BigNumber | string | Array<BigNumber | string>;
      divideBy?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { tokenAddress: BigNumber | string; divideBy: BigNumber | number },
      {
        tokenAddress?: BigNumber | string | Array<BigNumber | string>;
        divideBy?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "DivideTotalUpdated", eventFilter);
  }
  public LogAuthorizedAddressAddedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
    caller?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string; caller: BigNumber | string },
    {
      target?: BigNumber | string | Array<BigNumber | string>;
      caller?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string; caller: BigNumber | string },
      {
        target?: BigNumber | string | Array<BigNumber | string>;
        caller?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "LogAuthorizedAddressAdded", eventFilter);
  }
  public LogAuthorizedAddressRemovedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
    caller?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string; caller: BigNumber | string },
    {
      target?: BigNumber | string | Array<BigNumber | string>;
      caller?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string; caller: BigNumber | string },
      {
        target?: BigNumber | string | Array<BigNumber | string>;
        caller?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "LogAuthorizedAddressRemoved", eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}
